
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ayush
 */
public class emppage extends javax.swing.JFrame {

    /**
     * Creates new form emppage
     */
    public emppage() {
        initComponents();
    }
    public void close()
    {
        WindowEvent winClosingEvent= new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEveÂ­ntQueue().postEvent(winClosingEvent);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        emptable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        eptable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        assetissuetable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        ntable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        posi = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        ta = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        t1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EMPLOYEE INFO");
        setPreferredSize(new java.awt.Dimension(1200, 900));
        setResizable(false);

        jButton1.setText("LOGOUT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        emptable.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "GENERAL EMPLOYEE DETAILS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        emptable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "EMPID", "EMPNAME", "MARRIED", "GENDER", "ACCT NO", "NEFT", "PHONE", "ADDRESS", "PAN CARD", "DOB", "DESIGNATION", "DEPTNO"
            }
        ));
        emptable.setToolTipText("Click to Magnify a Cell in the Magnifier");
        emptable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emptableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(emptable);

        eptable.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "PROJECTS PRESENTLY INVOLVED", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)))));
        eptable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "EMPID", "PROJECTS"
            }
        ));
        eptable.setToolTipText("Click to Magnify a Cell in the Magnifier");
        eptable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eptableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(eptable);

        assetissuetable.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ASSETS IN POSSESSION", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        assetissuetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "ASSETID"
            }
        ));
        assetissuetable.setToolTipText("Click to Magnify a Cell in the Magnifier");
        assetissuetable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                assetissuetableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(assetissuetable);

        ntable.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "NOMINEE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        ntable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "NAME", "DOB", "GENDER", "RELATION"
            }
        ));
        ntable.setToolTipText("Click to Magnify a Cell in the Magnifier");
        ntable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ntableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(ntable);

        posi.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DESIGNATION AND SALARY", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        posi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "DESIGNATION", "SALARY"
            }
        ));
        posi.setToolTipText("Click to Magnify a Cell in the Magnifier");
        posi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                posiMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(posi);

        jTextField1.setEditable(false);

        jTextField2.setEditable(false);

        jLabel1.setText("IS DEPARTMENT HEAD: ");

        jLabel2.setText("IS ADMINISTRATOR (Y/N) :");

        ta.setEditable(false);
        ta.setColumns(20);
        ta.setRows(5);
        jScrollPane7.setViewportView(ta);

        jLabel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MAGNIFIER", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abyssinica SIL", 3, 14))); // NOI18N

        jButton2.setText("GET ALL DATA");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("ENTER THE EMPID:");

        t1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(204, 204, 204)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(136, 136, 136)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(163, 163, 163)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4)
                                    .addComponent(jScrollPane7)))
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(409, 409, 409)
                        .addComponent(jLabel3)
                        .addGap(126, 126, 126)
                        .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(491, 491, 491))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(245, 245, 245))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        login enterpage = new login();
                enterpage.setVisible(true);
                close();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        DefaultTableModel model = (DefaultTableModel)emptable.getModel();
        model.setRowCount(0); 
        try{

            Class.forName("com.mysql.jdbc.Driver");
            String connectionUrl = "jdbc:mysql://localhost/recursiveinc?" +
            "user=root&password=mysql";
            Connection conn = null;
            conn=(Connection)DriverManager.getConnection(connectionUrl);
            ResultSet rs = null;
            PreparedStatement pst = null;
            String query = "SELECT*FROM employee WHERE empid=?;";
            pst=conn.prepareStatement(query);
            pst.setString(1, t1.getText());
            rs=pst.executeQuery();
            int valueset=0;
            String d1=" ";
            model.addRow (new Object[]{d1,d1,d1,d1,d1,d1,d1,d1,d1,d1,d1,d1});
            while(rs.next())
            {
                 d1=rs.getString("empid");
                String d2=rs.getString("empname");
                String d3=rs.getString("married");
                String d4=rs.getString("gender");
                String d5=rs.getString("acctno");
                String d6=rs.getString("neft");
                String d7=rs.getString("phone");
                String d8=rs.getString("address");
                String d9=rs.getString("pancard");
                String d10=rs.getString("dob");
                String d11=rs.getString("post");
                String d12=rs.getString("deptno");
                model.addRow (new Object[]{d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12});
                valueset=1;
            }
            
            rs.close();
            pst.close();
            conn.close();
            if(valueset==0)
            {
                JOptionPane.showMessageDialog(null,"No matching record");
                return;
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Error in connection" );

        }
        model = (DefaultTableModel)eptable.getModel();
        model.setRowCount(0); 
        try{

            Class.forName("com.mysql.jdbc.Driver");
            String connectionUrl = "jdbc:mysql://localhost/recursiveinc?" +
            "user=root&password=mysql";
            Connection conn = null;
            conn=(Connection)DriverManager.getConnection(connectionUrl);
            ResultSet rs = null;
            PreparedStatement pst = null;
            String query = "SELECT*FROM empprojects WHERE empid=?;";
            pst=conn.prepareStatement(query);
            pst.setString(1, t1.getText());
            rs=pst.executeQuery();
            int valueset=0;
            model.addRow (new Object[]{" "," "});
            while(rs.next())
            {
                String d1=rs.getString("empid");
                String d2=rs.getString("projid");
               
                
                model.addRow (new Object[]{d1,d2});
                valueset=1;
            }
            
            rs.close();
            pst.close();
            conn.close();
            //if(valueset==0)
            //    JOptionPane.showMessageDialog(null,"No matching record");
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Error in connection" );

        }
        model = (DefaultTableModel)assetissuetable.getModel();
        model.setRowCount(0); 
        try{

            Class.forName("com.mysql.jdbc.Driver");
            String connectionUrl = "jdbc:mysql://localhost/recursiveinc?" +
            "user=root&password=mysql";
            Connection conn = null;
            conn=(Connection)DriverManager.getConnection(connectionUrl);
            ResultSet rs = null;
            PreparedStatement pst = null;
            String query = "SELECT*FROM assetsgiven WHERE empid=?;";
            pst=conn.prepareStatement(query);
            pst.setString(1, t1.getText());
            rs=pst.executeQuery();
            int valueset=0;
            model.addRow (new Object[]{" "});
            while(rs.next())
            {
                String d1=rs.getString("assetid");
                String d2=rs.getString("empid");
                
                model.addRow (new Object[]{d1});
                valueset=1;
            }
            
            rs.close();
            pst.close();
            conn.close();
            //if(valueset==0)
                //JOptionPane.showMessageDialog(null,"No matching record");
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Error in connection" );

        }
        model = (DefaultTableModel)ntable.getModel();
        model.setRowCount(0); 
        try{

            Class.forName("com.mysql.jdbc.Driver");
            String connectionUrl = "jdbc:mysql://localhost/recursiveinc?" +
            "user=root&password=mysql";
            Connection conn = null;
            conn=(Connection)DriverManager.getConnection(connectionUrl);
            ResultSet rs = null;
            PreparedStatement pst = null;
            String query = "SELECT*FROM nominee WHERE empid=?;";
            pst=conn.prepareStatement(query);
            pst.setString(1, t1.getText());
            rs=pst.executeQuery();
            int valueset=0;
            model.addRow (new Object[]{" "," "," "," "});
            while(rs.next())
            {
               String d1=rs.getString("name");
                String d2=rs.getString("dob");
                String d3=rs.getString("gender");
                String d4=rs.getString("relation");
                
                model.addRow (new Object[]{d1,d2,d3,d4});
                valueset=1;
            }
            
            rs.close();
            pst.close();
            conn.close();
           // if(valueset==0)
           //     JOptionPane.showMessageDialog(null,"No matching record");
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Error in connection" );

        }
        String uid=t1.getText();
       
        //System.out.println("testing");
        try{

            Class.forName("com.mysql.jdbc.Driver");
            String connectionUrl = "jdbc:mysql://localhost/recursiveinc?" +
            "user=root&password=mysql";
            Connection conn = null;
            conn=(Connection)DriverManager.getConnection(connectionUrl);
            ResultSet rs = null;
            PreparedStatement pst = null;
            String query = "SELECT*FROM administrators WHERE empid=?;";
            pst=conn.prepareStatement(query);
            pst.setString(1, uid);
            int ctr=0;
            rs=pst.executeQuery();
            if(rs.next())
            {
                //JOptionPane.showMessageDialog(null,"Login in administrator mode successful");
                //admintabs tabs = new admintabs();
                //tabs.setVisible(true);
                //close();
                ctr++;
            }
            if(ctr==0)
            {
                jTextField2.setText("NO");
            }
            else
            {
                jTextField2.setText("YES");
            }
            rs.close();
            pst.close();
            conn.close();
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Error in connection" );

        }
        
        
        
        
         String eid=t1.getText();
       
        //System.out.println("testing");
        try{

            Class.forName("com.mysql.jdbc.Driver");
            String connectionUrl = "jdbc:mysql://localhost/recursiveinc?" +
            "user=root&password=mysql";
            Connection conn = null;
            conn=(Connection)DriverManager.getConnection(connectionUrl);
            ResultSet rs = null;
            PreparedStatement pst = null;
            String query = "SELECT*FROM department WHERE head=?;";
            pst=conn.prepareStatement(query);
            pst.setString(1, eid);
            int ctr=0;
            rs=pst.executeQuery();
            if(rs.next())
            {
                //JOptionPane.showMessageDialog(null,"Login in administrator mode successful");
                //admintabs tabs = new admintabs();
                //tabs.setVisible(true);
                //close();
                ctr++;
            }
            if(ctr==0)
            {
                jTextField1.setText("NO");
            }
            else
            {
                jTextField1.setText("YES");
            }
            rs.close();
            pst.close();
            conn.close();
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Error in connection" );

        }
        
        
        
        
        model = (DefaultTableModel)posi.getModel();
        model.setRowCount(0); 
        try{

            Class.forName("com.mysql.jdbc.Driver");
            String connectionUrl = "jdbc:mysql://localhost/recursiveinc?" +
            "user=root&password=mysql";
            Connection conn = null;
            conn=(Connection)DriverManager.getConnection(connectionUrl);
            ResultSet rs = null;
            PreparedStatement pst = null;
            String query = "select distinct type,salary from position inner join employee on employee.post=position.type and employee.empid=? ;";
            pst=conn.prepareStatement(query);
            pst.setString(1, t1.getText());
            rs=pst.executeQuery();
            int valueset=0;
            model.addRow (new Object[]{" "," "});
            while(rs.next())
            {
                String d1=rs.getString("type");
                String d2=rs.getString("salary");
               
                
                model.addRow (new Object[]{d1,d2});
                valueset=1;
            }
            
            rs.close();
            pst.close();
            conn.close();
            //if(valueset==0)
            //    JOptionPane.showMessageDialog(null,"No matching record");
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null,e );

        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void emptableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emptableMouseClicked
         DefaultTableModel model = (DefaultTableModel)emptable.getModel();
        try{
            int row=emptable.getSelectedRow();
            int col=emptable.getSelectedColumn();
            String data = (emptable.getModel().getValueAt(row, col).toString());
            ta.setText(data);
            
            
           
            
            }   
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_emptableMouseClicked

    private void eptableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eptableMouseClicked
        DefaultTableModel model = (DefaultTableModel)eptable.getModel();
        try{
            int row=eptable.getSelectedRow();
            int col=eptable.getSelectedColumn();
            String data = (emptable.getModel().getValueAt(row, col).toString());
            ta.setText(data);
            
            
           
            
            }   
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_eptableMouseClicked

    private void posiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_posiMouseClicked
        DefaultTableModel model = (DefaultTableModel)posi.getModel();
        try{
            int row=posi.getSelectedRow();
            int col=posi.getSelectedColumn();
            String data = (posi.getModel().getValueAt(row, col).toString());
            ta.setText(data);
            
            
           
            
            }   
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_posiMouseClicked

    private void assetissuetableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assetissuetableMouseClicked
        DefaultTableModel model = (DefaultTableModel)assetissuetable.getModel();
        try{
            int row=assetissuetable.getSelectedRow();
            int col=assetissuetable.getSelectedColumn();
            String data = (assetissuetable.getModel().getValueAt(row, col).toString());
            ta.setText(data);
            
            
           
            
            }   
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_assetissuetableMouseClicked

    private void ntableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ntableMouseClicked
       DefaultTableModel model = (DefaultTableModel)ntable.getModel();
        try{
            int row=ntable.getSelectedRow();
            int col=ntable.getSelectedColumn();
            String data = (ntable.getModel().getValueAt(row, col).toString());
            ta.setText(data);
            
            
           
            
            }   
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_ntableMouseClicked

    private void t1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t1MouseClicked
         DefaultTableModel model = (DefaultTableModel)emptable.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel)eptable.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel)posi.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel)assetissuetable.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel)ntable.getModel();
        model.setRowCount(0);
        jTextField1.setText("");
        jTextField2.setText("");
        ta.setText(" ");
    }//GEN-LAST:event_t1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(emppage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(emppage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(emppage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(emppage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new emppage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable assetissuetable;
    private javax.swing.JTable emptable;
    private javax.swing.JTable eptable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable ntable;
    private javax.swing.JTable posi;
    private javax.swing.JTextField t1;
    private javax.swing.JTextArea ta;
    // End of variables declaration//GEN-END:variables
}
